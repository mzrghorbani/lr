// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_process_fe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_r_V_dout,
        strm_in_V_r_V_empty_n,
        strm_in_V_r_V_read,
        strm_in_V_phi_V_dout,
        strm_in_V_phi_V_empty_n,
        strm_in_V_phi_V_read,
        strm_in_V_z_V_dout,
        strm_in_V_z_V_empty_n,
        strm_in_V_z_V_read,
        strm_in_V_layer_V_dout,
        strm_in_V_layer_V_empty_n,
        strm_in_V_layer_V_read,
        strm_in_V_barrel_V_dout,
        strm_in_V_barrel_V_empty_n,
        strm_in_V_barrel_V_read,
        strm_in_V_psModule_V_dout,
        strm_in_V_psModule_V_empty_n,
        strm_in_V_psModule_V_read,
        strm_in_V_valid_V_dout,
        strm_in_V_valid_V_empty_n,
        strm_in_V_valid_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_return_48,
        strm_in_V_r_V_blk_n,
        strm_in_V_phi_V_blk_n,
        strm_in_V_z_V_blk_n,
        strm_in_V_layer_V_blk_n,
        strm_in_V_barrel_V_blk_n,
        strm_in_V_psModule_V_blk_n,
        strm_in_V_valid_V_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [12:0] strm_in_V_r_V_dout;
input   strm_in_V_r_V_empty_n;
output   strm_in_V_r_V_read;
input  [13:0] strm_in_V_phi_V_dout;
input   strm_in_V_phi_V_empty_n;
output   strm_in_V_phi_V_read;
input  [13:0] strm_in_V_z_V_dout;
input   strm_in_V_z_V_empty_n;
output   strm_in_V_z_V_read;
input  [2:0] strm_in_V_layer_V_dout;
input   strm_in_V_layer_V_empty_n;
output   strm_in_V_layer_V_read;
input  [0:0] strm_in_V_barrel_V_dout;
input   strm_in_V_barrel_V_empty_n;
output   strm_in_V_barrel_V_read;
input  [0:0] strm_in_V_psModule_V_dout;
input   strm_in_V_psModule_V_empty_n;
output   strm_in_V_psModule_V_read;
input  [0:0] strm_in_V_valid_V_dout;
input   strm_in_V_valid_V_empty_n;
output   strm_in_V_valid_V_read;
output  [12:0] ap_return_0;
output  [12:0] ap_return_1;
output  [12:0] ap_return_2;
output  [12:0] ap_return_3;
output  [12:0] ap_return_4;
output  [12:0] ap_return_5;
output  [12:0] ap_return_6;
output  [13:0] ap_return_7;
output  [13:0] ap_return_8;
output  [13:0] ap_return_9;
output  [13:0] ap_return_10;
output  [13:0] ap_return_11;
output  [13:0] ap_return_12;
output  [13:0] ap_return_13;
output  [13:0] ap_return_14;
output  [13:0] ap_return_15;
output  [13:0] ap_return_16;
output  [13:0] ap_return_17;
output  [13:0] ap_return_18;
output  [13:0] ap_return_19;
output  [13:0] ap_return_20;
output  [2:0] ap_return_21;
output  [2:0] ap_return_22;
output  [2:0] ap_return_23;
output  [2:0] ap_return_24;
output  [2:0] ap_return_25;
output  [2:0] ap_return_26;
output  [2:0] ap_return_27;
output  [0:0] ap_return_28;
output  [0:0] ap_return_29;
output  [0:0] ap_return_30;
output  [0:0] ap_return_31;
output  [0:0] ap_return_32;
output  [0:0] ap_return_33;
output  [0:0] ap_return_34;
output  [0:0] ap_return_35;
output  [0:0] ap_return_36;
output  [0:0] ap_return_37;
output  [0:0] ap_return_38;
output  [0:0] ap_return_39;
output  [0:0] ap_return_40;
output  [0:0] ap_return_41;
output  [0:0] ap_return_42;
output  [0:0] ap_return_43;
output  [0:0] ap_return_44;
output  [0:0] ap_return_45;
output  [0:0] ap_return_46;
output  [0:0] ap_return_47;
output  [0:0] ap_return_48;
output   strm_in_V_r_V_blk_n;
output   strm_in_V_phi_V_blk_n;
output   strm_in_V_z_V_blk_n;
output   strm_in_V_layer_V_blk_n;
output   strm_in_V_barrel_V_blk_n;
output   strm_in_V_psModule_V_blk_n;
output   strm_in_V_valid_V_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_r_V_read;
reg strm_in_V_phi_V_read;
reg strm_in_V_z_V_read;
reg strm_in_V_layer_V_read;
reg strm_in_V_barrel_V_read;
reg strm_in_V_psModule_V_read;
reg strm_in_V_valid_V_read;
reg strm_in_V_r_V_blk_n;
reg strm_in_V_phi_V_blk_n;
reg strm_in_V_z_V_blk_n;
reg strm_in_V_layer_V_blk_n;
reg strm_in_V_barrel_V_blk_n;
reg strm_in_V_psModule_V_blk_n;
reg strm_in_V_valid_V_blk_n;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [12:0] tmp_r_V_reg_328;
wire    io_acc_block_signal_op8;
reg    ap_block_state1;
reg   [13:0] tmp_phi_V_reg_333;
reg   [13:0] tmp_z_V_reg_338;
reg   [2:0] tmp_layer_V_reg_343;
reg   [0:0] tmp_barrel_V_reg_348;
reg   [0:0] tmp_psModule_V_reg_353;
reg   [0:0] tmp_valid_V_reg_358;
reg   [12:0] tmp_r_V_1_reg_363;
wire    io_acc_block_signal_op16;
reg   [13:0] tmp_phi_V_1_reg_368;
reg   [13:0] tmp_z_V_1_reg_373;
reg   [2:0] tmp_layer_V_1_reg_378;
reg   [0:0] tmp_barrel_V_1_reg_383;
reg   [0:0] tmp_psModule_V_1_reg_388;
reg   [0:0] tmp_valid_V_1_reg_393;
reg   [12:0] tmp_r_V_2_reg_398;
wire    io_acc_block_signal_op24;
reg   [13:0] tmp_phi_V_2_reg_403;
reg   [13:0] tmp_z_V_2_reg_408;
reg   [2:0] tmp_layer_V_2_reg_413;
reg   [0:0] tmp_barrel_V_2_reg_418;
reg   [0:0] tmp_psModule_V_2_reg_423;
reg   [0:0] tmp_valid_V_2_reg_428;
reg   [12:0] tmp_r_V_3_reg_433;
wire    io_acc_block_signal_op32;
reg   [13:0] tmp_phi_V_3_reg_438;
reg   [13:0] tmp_z_V_3_reg_443;
reg   [2:0] tmp_layer_V_3_reg_448;
reg   [0:0] tmp_barrel_V_3_reg_453;
reg   [0:0] tmp_psModule_V_3_reg_458;
reg   [0:0] tmp_valid_V_3_reg_463;
reg   [12:0] tmp_r_V_4_reg_468;
wire    io_acc_block_signal_op40;
reg   [13:0] tmp_phi_V_4_reg_473;
reg   [13:0] tmp_z_V_4_reg_478;
reg   [2:0] tmp_layer_V_4_reg_483;
reg   [0:0] tmp_barrel_V_4_reg_488;
reg   [0:0] tmp_psModule_V_4_reg_493;
reg   [0:0] tmp_valid_V_4_reg_498;
reg   [12:0] tmp_r_V_5_reg_503;
wire    io_acc_block_signal_op48;
reg   [13:0] tmp_phi_V_5_reg_508;
reg   [13:0] tmp_z_V_5_reg_513;
reg   [2:0] tmp_layer_V_5_reg_518;
reg   [0:0] tmp_barrel_V_5_reg_523;
reg   [0:0] tmp_psModule_V_5_reg_528;
reg   [0:0] tmp_valid_V_5_reg_533;
wire    io_acc_block_signal_op63;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce))) begin
        tmp_barrel_V_1_reg_383 <= strm_in_V_barrel_V_dout;
        tmp_layer_V_1_reg_378 <= strm_in_V_layer_V_dout;
        tmp_phi_V_1_reg_368 <= strm_in_V_phi_V_dout;
        tmp_psModule_V_1_reg_388 <= strm_in_V_psModule_V_dout;
        tmp_r_V_1_reg_363 <= strm_in_V_r_V_dout;
        tmp_valid_V_1_reg_393 <= strm_in_V_valid_V_dout;
        tmp_z_V_1_reg_373 <= strm_in_V_z_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce))) begin
        tmp_barrel_V_2_reg_418 <= strm_in_V_barrel_V_dout;
        tmp_layer_V_2_reg_413 <= strm_in_V_layer_V_dout;
        tmp_phi_V_2_reg_403 <= strm_in_V_phi_V_dout;
        tmp_psModule_V_2_reg_423 <= strm_in_V_psModule_V_dout;
        tmp_r_V_2_reg_398 <= strm_in_V_r_V_dout;
        tmp_valid_V_2_reg_428 <= strm_in_V_valid_V_dout;
        tmp_z_V_2_reg_408 <= strm_in_V_z_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
        tmp_barrel_V_3_reg_453 <= strm_in_V_barrel_V_dout;
        tmp_layer_V_3_reg_448 <= strm_in_V_layer_V_dout;
        tmp_phi_V_3_reg_438 <= strm_in_V_phi_V_dout;
        tmp_psModule_V_3_reg_458 <= strm_in_V_psModule_V_dout;
        tmp_r_V_3_reg_433 <= strm_in_V_r_V_dout;
        tmp_valid_V_3_reg_463 <= strm_in_V_valid_V_dout;
        tmp_z_V_3_reg_443 <= strm_in_V_z_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
        tmp_barrel_V_4_reg_488 <= strm_in_V_barrel_V_dout;
        tmp_layer_V_4_reg_483 <= strm_in_V_layer_V_dout;
        tmp_phi_V_4_reg_473 <= strm_in_V_phi_V_dout;
        tmp_psModule_V_4_reg_493 <= strm_in_V_psModule_V_dout;
        tmp_r_V_4_reg_468 <= strm_in_V_r_V_dout;
        tmp_valid_V_4_reg_498 <= strm_in_V_valid_V_dout;
        tmp_z_V_4_reg_478 <= strm_in_V_z_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce))) begin
        tmp_barrel_V_5_reg_523 <= strm_in_V_barrel_V_dout;
        tmp_layer_V_5_reg_518 <= strm_in_V_layer_V_dout;
        tmp_phi_V_5_reg_508 <= strm_in_V_phi_V_dout;
        tmp_psModule_V_5_reg_528 <= strm_in_V_psModule_V_dout;
        tmp_r_V_5_reg_503 <= strm_in_V_r_V_dout;
        tmp_valid_V_5_reg_533 <= strm_in_V_valid_V_dout;
        tmp_z_V_5_reg_513 <= strm_in_V_z_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        tmp_barrel_V_reg_348 <= strm_in_V_barrel_V_dout;
        tmp_layer_V_reg_343 <= strm_in_V_layer_V_dout;
        tmp_phi_V_reg_333 <= strm_in_V_phi_V_dout;
        tmp_psModule_V_reg_353 <= strm_in_V_psModule_V_dout;
        tmp_r_V_reg_328 <= strm_in_V_r_V_dout;
        tmp_valid_V_reg_358 <= strm_in_V_valid_V_dout;
        tmp_z_V_reg_338 <= strm_in_V_z_V_dout;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_barrel_V_blk_n = strm_in_V_barrel_V_empty_n;
    end else begin
        strm_in_V_barrel_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_barrel_V_read = 1'b1;
    end else begin
        strm_in_V_barrel_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_layer_V_blk_n = strm_in_V_layer_V_empty_n;
    end else begin
        strm_in_V_layer_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_layer_V_read = 1'b1;
    end else begin
        strm_in_V_layer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_phi_V_blk_n = strm_in_V_phi_V_empty_n;
    end else begin
        strm_in_V_phi_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_phi_V_read = 1'b1;
    end else begin
        strm_in_V_phi_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_psModule_V_blk_n = strm_in_V_psModule_V_empty_n;
    end else begin
        strm_in_V_psModule_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_psModule_V_read = 1'b1;
    end else begin
        strm_in_V_psModule_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_r_V_blk_n = strm_in_V_r_V_empty_n;
    end else begin
        strm_in_V_r_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_r_V_read = 1'b1;
    end else begin
        strm_in_V_r_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_valid_V_blk_n = strm_in_V_valid_V_empty_n;
    end else begin
        strm_in_V_valid_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_valid_V_read = 1'b1;
    end else begin
        strm_in_V_valid_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_in_V_z_V_blk_n = strm_in_V_z_V_empty_n;
    end else begin
        strm_in_V_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | ((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce)) | ((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce)))) begin
        strm_in_V_z_V_read = 1'b1;
    end else begin
        strm_in_V_z_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op16 == 1'b1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (io_acc_block_signal_op24 == 1'b1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((io_acc_block_signal_op32 == 1'b1) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((io_acc_block_signal_op40 == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((io_acc_block_signal_op48 == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((io_acc_block_signal_op63 == 1'b1) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((io_acc_block_signal_op8 == 1'b0) | (ap_start == 1'b0));
end

assign ap_return_0 = tmp_r_V_reg_328;

assign ap_return_1 = tmp_r_V_1_reg_363;

assign ap_return_10 = tmp_phi_V_3_reg_438;

assign ap_return_11 = tmp_phi_V_4_reg_473;

assign ap_return_12 = tmp_phi_V_5_reg_508;

assign ap_return_13 = strm_in_V_phi_V_dout;

assign ap_return_14 = tmp_z_V_reg_338;

assign ap_return_15 = tmp_z_V_1_reg_373;

assign ap_return_16 = tmp_z_V_2_reg_408;

assign ap_return_17 = tmp_z_V_3_reg_443;

assign ap_return_18 = tmp_z_V_4_reg_478;

assign ap_return_19 = tmp_z_V_5_reg_513;

assign ap_return_2 = tmp_r_V_2_reg_398;

assign ap_return_20 = strm_in_V_z_V_dout;

assign ap_return_21 = tmp_layer_V_reg_343;

assign ap_return_22 = tmp_layer_V_1_reg_378;

assign ap_return_23 = tmp_layer_V_2_reg_413;

assign ap_return_24 = tmp_layer_V_3_reg_448;

assign ap_return_25 = tmp_layer_V_4_reg_483;

assign ap_return_26 = tmp_layer_V_5_reg_518;

assign ap_return_27 = strm_in_V_layer_V_dout;

assign ap_return_28 = tmp_barrel_V_reg_348;

assign ap_return_29 = tmp_barrel_V_1_reg_383;

assign ap_return_3 = tmp_r_V_3_reg_433;

assign ap_return_30 = tmp_barrel_V_2_reg_418;

assign ap_return_31 = tmp_barrel_V_3_reg_453;

assign ap_return_32 = tmp_barrel_V_4_reg_488;

assign ap_return_33 = tmp_barrel_V_5_reg_523;

assign ap_return_34 = strm_in_V_barrel_V_dout;

assign ap_return_35 = tmp_psModule_V_reg_353;

assign ap_return_36 = tmp_psModule_V_1_reg_388;

assign ap_return_37 = tmp_psModule_V_2_reg_423;

assign ap_return_38 = tmp_psModule_V_3_reg_458;

assign ap_return_39 = tmp_psModule_V_4_reg_493;

assign ap_return_4 = tmp_r_V_4_reg_468;

assign ap_return_40 = tmp_psModule_V_5_reg_528;

assign ap_return_41 = strm_in_V_psModule_V_dout;

assign ap_return_42 = tmp_valid_V_reg_358;

assign ap_return_43 = tmp_valid_V_1_reg_393;

assign ap_return_44 = tmp_valid_V_2_reg_428;

assign ap_return_45 = tmp_valid_V_3_reg_463;

assign ap_return_46 = tmp_valid_V_4_reg_498;

assign ap_return_47 = tmp_valid_V_5_reg_533;

assign ap_return_48 = strm_in_V_valid_V_dout;

assign ap_return_5 = tmp_r_V_5_reg_503;

assign ap_return_6 = strm_in_V_r_V_dout;

assign ap_return_7 = tmp_phi_V_reg_333;

assign ap_return_8 = tmp_phi_V_1_reg_368;

assign ap_return_9 = tmp_phi_V_2_reg_403;

assign io_acc_block_signal_op16 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

assign io_acc_block_signal_op24 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

assign io_acc_block_signal_op32 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

assign io_acc_block_signal_op40 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

assign io_acc_block_signal_op48 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

assign io_acc_block_signal_op63 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

assign io_acc_block_signal_op8 = (strm_in_V_z_V_empty_n & strm_in_V_valid_V_empty_n & strm_in_V_r_V_empty_n & strm_in_V_psModule_V_empty_n & strm_in_V_phi_V_empty_n & strm_in_V_layer_V_empty_n & strm_in_V_barrel_V_empty_n);

endmodule //dummy_process_fe
