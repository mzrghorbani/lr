-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_process_fe is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_r_V_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    strm_in_V_r_V_empty_n : IN STD_LOGIC;
    strm_in_V_r_V_read : OUT STD_LOGIC;
    strm_in_V_phi_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    strm_in_V_phi_V_empty_n : IN STD_LOGIC;
    strm_in_V_phi_V_read : OUT STD_LOGIC;
    strm_in_V_z_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
    strm_in_V_z_V_empty_n : IN STD_LOGIC;
    strm_in_V_z_V_read : OUT STD_LOGIC;
    strm_in_V_layer_V_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    strm_in_V_layer_V_empty_n : IN STD_LOGIC;
    strm_in_V_layer_V_read : OUT STD_LOGIC;
    strm_in_V_barrel_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_V_barrel_V_empty_n : IN STD_LOGIC;
    strm_in_V_barrel_V_read : OUT STD_LOGIC;
    strm_in_V_psModule_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_V_psModule_V_empty_n : IN STD_LOGIC;
    strm_in_V_psModule_V_read : OUT STD_LOGIC;
    strm_in_V_valid_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_V_valid_V_empty_n : IN STD_LOGIC;
    strm_in_V_valid_V_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (0 downto 0);
    strm_in_V_r_V_blk_n : OUT STD_LOGIC;
    strm_in_V_phi_V_blk_n : OUT STD_LOGIC;
    strm_in_V_z_V_blk_n : OUT STD_LOGIC;
    strm_in_V_layer_V_blk_n : OUT STD_LOGIC;
    strm_in_V_barrel_V_blk_n : OUT STD_LOGIC;
    strm_in_V_psModule_V_blk_n : OUT STD_LOGIC;
    strm_in_V_valid_V_blk_n : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dummy_process_fe is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_r_V_reg_328 : STD_LOGIC_VECTOR (12 downto 0);
    signal io_acc_block_signal_op8 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_phi_V_reg_333 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_z_V_reg_338 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_layer_V_reg_343 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_barrel_V_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_psModule_V_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_valid_V_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_r_V_1_reg_363 : STD_LOGIC_VECTOR (12 downto 0);
    signal io_acc_block_signal_op16 : STD_LOGIC;
    signal tmp_phi_V_1_reg_368 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_z_V_1_reg_373 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_layer_V_1_reg_378 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_barrel_V_1_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_psModule_V_1_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_valid_V_1_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_r_V_2_reg_398 : STD_LOGIC_VECTOR (12 downto 0);
    signal io_acc_block_signal_op24 : STD_LOGIC;
    signal tmp_phi_V_2_reg_403 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_z_V_2_reg_408 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_layer_V_2_reg_413 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_barrel_V_2_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_psModule_V_2_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_valid_V_2_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_r_V_3_reg_433 : STD_LOGIC_VECTOR (12 downto 0);
    signal io_acc_block_signal_op32 : STD_LOGIC;
    signal tmp_phi_V_3_reg_438 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_z_V_3_reg_443 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_layer_V_3_reg_448 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_barrel_V_3_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_psModule_V_3_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_valid_V_3_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_r_V_4_reg_468 : STD_LOGIC_VECTOR (12 downto 0);
    signal io_acc_block_signal_op40 : STD_LOGIC;
    signal tmp_phi_V_4_reg_473 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_z_V_4_reg_478 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_layer_V_4_reg_483 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_barrel_V_4_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_psModule_V_4_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_valid_V_4_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_r_V_5_reg_503 : STD_LOGIC_VECTOR (12 downto 0);
    signal io_acc_block_signal_op48 : STD_LOGIC;
    signal tmp_phi_V_5_reg_508 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_z_V_5_reg_513 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_layer_V_5_reg_518 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_barrel_V_5_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_psModule_V_5_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_valid_V_5_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal io_acc_block_signal_op63 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                tmp_barrel_V_1_reg_383 <= strm_in_V_barrel_V_dout;
                tmp_layer_V_1_reg_378 <= strm_in_V_layer_V_dout;
                tmp_phi_V_1_reg_368 <= strm_in_V_phi_V_dout;
                tmp_psModule_V_1_reg_388 <= strm_in_V_psModule_V_dout;
                tmp_r_V_1_reg_363 <= strm_in_V_r_V_dout;
                tmp_valid_V_1_reg_393 <= strm_in_V_valid_V_dout;
                tmp_z_V_1_reg_373 <= strm_in_V_z_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                tmp_barrel_V_2_reg_418 <= strm_in_V_barrel_V_dout;
                tmp_layer_V_2_reg_413 <= strm_in_V_layer_V_dout;
                tmp_phi_V_2_reg_403 <= strm_in_V_phi_V_dout;
                tmp_psModule_V_2_reg_423 <= strm_in_V_psModule_V_dout;
                tmp_r_V_2_reg_398 <= strm_in_V_r_V_dout;
                tmp_valid_V_2_reg_428 <= strm_in_V_valid_V_dout;
                tmp_z_V_2_reg_408 <= strm_in_V_z_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                tmp_barrel_V_3_reg_453 <= strm_in_V_barrel_V_dout;
                tmp_layer_V_3_reg_448 <= strm_in_V_layer_V_dout;
                tmp_phi_V_3_reg_438 <= strm_in_V_phi_V_dout;
                tmp_psModule_V_3_reg_458 <= strm_in_V_psModule_V_dout;
                tmp_r_V_3_reg_433 <= strm_in_V_r_V_dout;
                tmp_valid_V_3_reg_463 <= strm_in_V_valid_V_dout;
                tmp_z_V_3_reg_443 <= strm_in_V_z_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce))) then
                tmp_barrel_V_4_reg_488 <= strm_in_V_barrel_V_dout;
                tmp_layer_V_4_reg_483 <= strm_in_V_layer_V_dout;
                tmp_phi_V_4_reg_473 <= strm_in_V_phi_V_dout;
                tmp_psModule_V_4_reg_493 <= strm_in_V_psModule_V_dout;
                tmp_r_V_4_reg_468 <= strm_in_V_r_V_dout;
                tmp_valid_V_4_reg_498 <= strm_in_V_valid_V_dout;
                tmp_z_V_4_reg_478 <= strm_in_V_z_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce))) then
                tmp_barrel_V_5_reg_523 <= strm_in_V_barrel_V_dout;
                tmp_layer_V_5_reg_518 <= strm_in_V_layer_V_dout;
                tmp_phi_V_5_reg_508 <= strm_in_V_phi_V_dout;
                tmp_psModule_V_5_reg_528 <= strm_in_V_psModule_V_dout;
                tmp_r_V_5_reg_503 <= strm_in_V_r_V_dout;
                tmp_valid_V_5_reg_533 <= strm_in_V_valid_V_dout;
                tmp_z_V_5_reg_513 <= strm_in_V_z_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then
                tmp_barrel_V_reg_348 <= strm_in_V_barrel_V_dout;
                tmp_layer_V_reg_343 <= strm_in_V_layer_V_dout;
                tmp_phi_V_reg_333 <= strm_in_V_phi_V_dout;
                tmp_psModule_V_reg_353 <= strm_in_V_psModule_V_dout;
                tmp_r_V_reg_328 <= strm_in_V_r_V_dout;
                tmp_valid_V_reg_358 <= strm_in_V_valid_V_dout;
                tmp_z_V_reg_338 <= strm_in_V_z_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, io_acc_block_signal_op8)
    begin
                ap_block_state1 <= ((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op63)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op63)
    begin
        if (((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= tmp_r_V_reg_328;
    ap_return_1 <= tmp_r_V_1_reg_363;
    ap_return_10 <= tmp_phi_V_3_reg_438;
    ap_return_11 <= tmp_phi_V_4_reg_473;
    ap_return_12 <= tmp_phi_V_5_reg_508;
    ap_return_13 <= strm_in_V_phi_V_dout;
    ap_return_14 <= tmp_z_V_reg_338;
    ap_return_15 <= tmp_z_V_1_reg_373;
    ap_return_16 <= tmp_z_V_2_reg_408;
    ap_return_17 <= tmp_z_V_3_reg_443;
    ap_return_18 <= tmp_z_V_4_reg_478;
    ap_return_19 <= tmp_z_V_5_reg_513;
    ap_return_2 <= tmp_r_V_2_reg_398;
    ap_return_20 <= strm_in_V_z_V_dout;
    ap_return_21 <= tmp_layer_V_reg_343;
    ap_return_22 <= tmp_layer_V_1_reg_378;
    ap_return_23 <= tmp_layer_V_2_reg_413;
    ap_return_24 <= tmp_layer_V_3_reg_448;
    ap_return_25 <= tmp_layer_V_4_reg_483;
    ap_return_26 <= tmp_layer_V_5_reg_518;
    ap_return_27 <= strm_in_V_layer_V_dout;
    ap_return_28 <= tmp_barrel_V_reg_348;
    ap_return_29 <= tmp_barrel_V_1_reg_383;
    ap_return_3 <= tmp_r_V_3_reg_433;
    ap_return_30 <= tmp_barrel_V_2_reg_418;
    ap_return_31 <= tmp_barrel_V_3_reg_453;
    ap_return_32 <= tmp_barrel_V_4_reg_488;
    ap_return_33 <= tmp_barrel_V_5_reg_523;
    ap_return_34 <= strm_in_V_barrel_V_dout;
    ap_return_35 <= tmp_psModule_V_reg_353;
    ap_return_36 <= tmp_psModule_V_1_reg_388;
    ap_return_37 <= tmp_psModule_V_2_reg_423;
    ap_return_38 <= tmp_psModule_V_3_reg_458;
    ap_return_39 <= tmp_psModule_V_4_reg_493;
    ap_return_4 <= tmp_r_V_4_reg_468;
    ap_return_40 <= tmp_psModule_V_5_reg_528;
    ap_return_41 <= strm_in_V_psModule_V_dout;
    ap_return_42 <= tmp_valid_V_reg_358;
    ap_return_43 <= tmp_valid_V_1_reg_393;
    ap_return_44 <= tmp_valid_V_2_reg_428;
    ap_return_45 <= tmp_valid_V_3_reg_463;
    ap_return_46 <= tmp_valid_V_4_reg_498;
    ap_return_47 <= tmp_valid_V_5_reg_533;
    ap_return_48 <= strm_in_V_valid_V_dout;
    ap_return_5 <= tmp_r_V_5_reg_503;
    ap_return_6 <= strm_in_V_r_V_dout;
    ap_return_7 <= tmp_phi_V_reg_333;
    ap_return_8 <= tmp_phi_V_1_reg_368;
    ap_return_9 <= tmp_phi_V_2_reg_403;
    io_acc_block_signal_op16 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);
    io_acc_block_signal_op24 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);
    io_acc_block_signal_op32 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);
    io_acc_block_signal_op40 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);
    io_acc_block_signal_op48 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);
    io_acc_block_signal_op63 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);
    io_acc_block_signal_op8 <= (strm_in_V_z_V_empty_n and strm_in_V_valid_V_empty_n and strm_in_V_r_V_empty_n and strm_in_V_psModule_V_empty_n and strm_in_V_phi_V_empty_n and strm_in_V_layer_V_empty_n and strm_in_V_barrel_V_empty_n);

    strm_in_V_barrel_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_barrel_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_barrel_V_blk_n <= strm_in_V_barrel_V_empty_n;
        else 
            strm_in_V_barrel_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_barrel_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_barrel_V_read <= ap_const_logic_1;
        else 
            strm_in_V_barrel_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_layer_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_layer_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_layer_V_blk_n <= strm_in_V_layer_V_empty_n;
        else 
            strm_in_V_layer_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_layer_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_layer_V_read <= ap_const_logic_1;
        else 
            strm_in_V_layer_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_phi_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_phi_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_phi_V_blk_n <= strm_in_V_phi_V_empty_n;
        else 
            strm_in_V_phi_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_phi_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_phi_V_read <= ap_const_logic_1;
        else 
            strm_in_V_phi_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_psModule_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_psModule_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_psModule_V_blk_n <= strm_in_V_psModule_V_empty_n;
        else 
            strm_in_V_psModule_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_psModule_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_psModule_V_read <= ap_const_logic_1;
        else 
            strm_in_V_psModule_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_r_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_r_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_r_V_blk_n <= strm_in_V_r_V_empty_n;
        else 
            strm_in_V_r_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_r_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_r_V_read <= ap_const_logic_1;
        else 
            strm_in_V_r_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_valid_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_valid_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_valid_V_blk_n <= strm_in_V_valid_V_empty_n;
        else 
            strm_in_V_valid_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_valid_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_valid_V_read <= ap_const_logic_1;
        else 
            strm_in_V_valid_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_z_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_in_V_z_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_in_V_z_V_blk_n <= strm_in_V_z_V_empty_n;
        else 
            strm_in_V_z_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_z_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_ce, io_acc_block_signal_op8, io_acc_block_signal_op16, io_acc_block_signal_op24, io_acc_block_signal_op32, io_acc_block_signal_op40, io_acc_block_signal_op48, io_acc_block_signal_op63)
    begin
        if (((not(((io_acc_block_signal_op8 = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op63 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op48 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op40 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = ap_ce)) or ((io_acc_block_signal_op32 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (io_acc_block_signal_op24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (io_acc_block_signal_op16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            strm_in_V_z_V_read <= ap_const_logic_1;
        else 
            strm_in_V_z_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
